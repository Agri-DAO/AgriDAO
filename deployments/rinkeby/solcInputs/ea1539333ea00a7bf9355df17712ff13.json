{
  "language": "Solidity",
  "sources": {
    "contracts/BorrowerLogic.sol": {
      "content": "pragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IBorrowerLogic.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\ncontract BorrowerLogic is Context, AccessControl {\n    uint256 public globalLoanNumber;\n    uint256 public rate;\n    uint256 public agentCommission;\n    uint256 public loanAmount;\n    uint256 public loanDuration;\n    address public agentAddress;\n    address public borrowerAddress;\n    uint256 public creationTime;\n    uint256 public maturityTime;\n    bool public loanRepaid;\n    address public delegateAddress;\n    bool public delegateVerified;\n    bool public loanActive;\n    address public lenderContract;\n    address public daoTreasury;\n\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n    bytes32 public constant DELEGATE_ROLE = keccak256(\"DELEGATE_ROLE\");\n    bytes32 public constant BORROWER_ROLE = keccak256(\"BORROWER_ROLE\");\n    bytes32 public constant LENDER_ROLE = keccak256(\"LENDER_ROLE\");\n\n\n    struct LoanAgreement {\n        uint256 rate;\n        uint256 loanAmount;\n        uint256 loanDuration;\n        address borrowerAddress;\n        uint256 creationTime;\n        uint256 maturityTime;\n        bool loanRepaid;\n        bool delegateVerified;\n        bool loanActive;\n    }\n\n    //mapping loanNumber to LoanAgreement struct\n    mapping(uint256 => LoanAgreement) public _LoanNumberToLoanAgreement;\n\n    event loanCreated(uint256 LoanNumber, uint256 Rate, uint256 LoanAmount, uint256 LoanDuration, address BorrowerAddress);\n    event loanDeprecated(uint256 LoanNumber, uint256 LoanAmount, uint256 creationTime, uint256 maturityTime, uint256 DaysOverdue, bool LoanRepaid);\n    event loanApproved(uint256 LoanNumber, uint256 Rate, uint256 LoanAmount, uint256 LoanDuration,address UserAddress,bool DelegateVerified);\n    event loanOverdue(uint256 LoanNumber, uint256 ExpiryTimestamp, uint256 CurrentTimestamp);\n\n    constructor(address DelegateAddress, address LenderContract, address DaoTreasury) public {\n        globalLoanNumber = 1;\n        delegateAddress = DelegateAddress;\n        daoTreasury = DaoTreasury;\n        lenderContract = LenderContract;\n        _grantRole(OWNER_ROLE, _msgSender());\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\n        _setRoleAdmin(LENDER_ROLE, OWNER_ROLE);\n        _setRoleAdmin(DELEGATE_ROLE, OWNER_ROLE);\n        _setRoleAdmin(BORROWER_ROLE, OWNER_ROLE);\n\n    }\n\n    /** @notice function call used for creating loan agreements\n        @param Rate interest rate involved in the loanAgreement\n        @param LoanAmount amount issued in the loan\n        @param LoanDuration duration of the created loan*/\n    function createLoanAgreement(uint256 LoanAmount, uint256  LoanDuration, uint256 Rate) public onlyLender returns (uint256) {\n        uint256 newLoanNumber = globalLoanNumber;\n        LoanAgreement memory loanAgreement;\n        uint256 currentTime = block.timestamp;\n        uint256 expiryTimestamp = currentTime + (LoanDuration * 86400); //convert loan duration days to seconds\n        loanAgreement = LoanAgreement(Rate, LoanAmount, LoanDuration, msg.sender, currentTime, expiryTimestamp, false, false, false);\n        _LoanNumberToLoanAgreement[newLoanNumber] = loanAgreement;\n        globalLoanNumber++;\n        emit loanCreated(newLoanNumber, Rate, LoanAmount, LoanDuration, msg.sender);\n        return newLoanNumber;\n    }\n\n    /** @notice function used to execute an existing loan agreement\n        @param loanNumber the loan number for the loan to be executed\n        @dev will have to update the fund transfer function to be exclusively payable in USDC*/\n    function executeLoanAgreement(uint256 loanNumber) public payable returns (bool) {\n        require(_LoanNumberToLoanAgreement[loanNumber].delegateVerified == true, \"ERROR: Loan not verified by delegate wallet\");\n        _LoanNumberToLoanAgreement[loanNumber].loanActive = true;\n        require(_LoanNumberToLoanAgreement[loanNumber].loanAmount == msg.value, \"ERROR: msg.value not equal to loan amount\");\n        emit loanApproved(loanNumber, _LoanNumberToLoanAgreement[loanNumber].rate, _LoanNumberToLoanAgreement[loanNumber].loanAmount,\n        _LoanNumberToLoanAgreement[loanNumber].loanDuration,_LoanNumberToLoanAgreement[loanNumber].borrowerAddress,\n        _LoanNumberToLoanAgreement[loanNumber].delegateVerified);\n        return _LoanNumberToLoanAgreement[loanNumber].loanActive;\n    }\n\n\n\n    /** @notice function call for the delegate wallet to verify the loan agreement\n        @param loanNumber the loan number that the verification is for\n        @dev ideally we will be able to remove this function and have this verification performed through ethereum signing*/\n    function delegateVerify(uint256 loanNumber) public onlyDelegate returns (bool) {\n        require(msg.sender == delegateAddress, \"ERROR: DelegateVerify only callable by Delegate Wallet\");\n        _LoanNumberToLoanAgreement[loanNumber].delegateVerified = true;\n        return _LoanNumberToLoanAgreement[loanNumber].delegateVerified;\n    }\n\n        /**@notice function call to check if a loan is overdue\n    @param loanNumber the loan number that is checked if past maturity*/\n    function checkOverdue(uint256 loanNumber) view public returns (bool) {\n        if(_LoanNumberToLoanAgreement[loanNumber].maturityTime < block.timestamp\n        && _LoanNumberToLoanAgreement[loanNumber].loanActive == false){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n        /**@notice function call to automatically route incoming funds\n        @param loanNumber the loanNumber that the funds are being routed for\n        @param loanAmount the final amount of the loan equal to the loanBase + interest\n        @param loanBase the initial base amount of the loan */\n    function routeFunds(uint256 loanNumber, uint256 loanAmount, uint256 loanBase) public onlyDelegate returns (bool){\n        uint256 interestAmount = loanAmount - loanBase;\n        uint256 interestAmountLenders = (interestAmount * 7)/(interestAmount * 10); // need to figure out a better way to multiply by decimal (this is * 0.7)\n        uint256 interestAmountDAO = (interestAmount * 1)/(interestAmount * 10); // this is multiply by 0.1\n        uint256 interestAmountDelegate = (interestAmount * 2)/(interestAmount * 10); // this is multiply by 0.2\n\n        //pay loan base straight to lender contract\n        //split interest amount into 70% to lender contract, 10% to DAO treasury, 20% to Delegate\n\n    }\n\n    /**@notice function to repay a loan\n    @param loanNumber the loan number of the loan to be repaid\n    @dev will have to update the fund transfer function to be exclusively payable in USDC*/\n    function repayLoan(uint256 loanNumber) public onlyBorrower payable returns (bool){\n        uint256 CurrentTime = block.timestamp;\n        uint256 loanBase = _LoanNumberToLoanAgreement[loanNumber].loanAmount;\n        uint256 LoanValue = _LoanNumberToLoanAgreement[loanNumber].loanAmount;\n        uint256 CreationTime = _LoanNumberToLoanAgreement[loanNumber].creationTime;\n        if(checkOverdue(loanNumber) == true){\n            emit loanOverdue(loanNumber, _LoanNumberToLoanAgreement[loanNumber].maturityTime, block.timestamp);\n        }\n        require(CurrentTime >  CreationTime + 86400, \"ERROR: Loan created less than a day ago\"); //86400 seconds = 1 day\n        uint256 daysSinceCreation = (CurrentTime - CreationTime)/86400; //should return a floor value\n        for(uint256 i = 1; i<=daysSinceCreation; i++){\n            LoanValue = LoanValue + (LoanValue * rate);\n        }\n        _LoanNumberToLoanAgreement[loanNumber].loanAmount = LoanValue;\n\n        //fund transfer occurs for amount of loan value\n\n        require(_LoanNumberToLoanAgreement[loanNumber].loanAmount == msg.value, \"ERROR: msg.value not equal to outstanding loan amount\");\n\n        //if loan value transfer is successful - update loanRepaid to true and return true,\n        //else return false and tx bounces. Either that or include same logic via require statement\n        return true;\n    }\n\n    function checkAccess() public hasAccess returns (uint256){\n      return 1;\n    }\n\n    /** @notice function call to check for all overdue loans any overdue loans*/\n    function checkAll() view public returns (uint256[] memory) {\n        uint256[] memory overdueLoans;\n        uint256 length = 0;\n        for (uint256 i = 1; i<=globalLoanNumber; i++){\n            if(_LoanNumberToLoanAgreement[i].loanActive == true) {\n                if(checkOverdue(i) == true){\n                    if(length != 0){\n                        length++;\n                    }\n                    overdueLoans[length] = i;\n                }\n            }\n        }\n        return overdueLoans;\n    }\n\n    /** @notice function call used to 'deprecate' a loan - called when a loan has been fully repaid\n        @param loanNumber the loanNumber for the loan to be deprecated */\n    function deprecateLoan(uint256 loanNumber) public onlyOwner returns (uint256) {\n        require(_LoanNumberToLoanAgreement[loanNumber].loanActive == true, \"ERROR: Loan already inactive\");\n        require(_LoanNumberToLoanAgreement[loanNumber].loanRepaid == true, \"ERROR: Loan has not been repaid\");\n        _LoanNumberToLoanAgreement[loanNumber].loanActive = false;\n        emit loanDeprecated(loanNumber, _LoanNumberToLoanAgreement[loanNumber].loanAmount, _LoanNumberToLoanAgreement[loanNumber].loanDuration,\n        _LoanNumberToLoanAgreement[loanNumber].creationTime, _LoanNumberToLoanAgreement[loanNumber].maturityTime,\n        _LoanNumberToLoanAgreement[loanNumber].loanRepaid);\n        return loanNumber;\n    }\n\n    /**\n      Function to test roles\n    */\n    function ownerRole(address a) public view returns (bool) {\n      return hasRole(OWNER_ROLE, a);\n    }\n\n    function grantLender(address a) onlyOwner public {\n      grantRole(LENDER_ROLE, a);\n\n    }\n\n    function grantBorrower(address a) onlyOwner public {\n      grantRole(BORROWER_ROLE, a);\n    }\n\n    function grantDelegate(address a) onlyOwner public {\n      grantRole(DELEGATE_ROLE, a);\n    }\n\n    modifier onlyDelegate() {\n      require(hasRole(DELEGATE_ROLE, _msgSender()), \"Must be a delegate\");\n      _;\n    }\n\n    modifier onlyLender() {\n      require(hasRole(LENDER_ROLE, _msgSender()), \"Must be a lender\");\n      _;\n    }\n\n    modifier onlyBorrower() {\n      require(hasRole(BORROWER_ROLE, _msgSender()), \"Must be a borrower\");\n      _;\n    }\n\n    modifier onlyOwner() {\n      require(hasRole(OWNER_ROLE, _msgSender()), \"Must be an owner\");\n      _;\n    }\n\n    modifier hasAccess() {\n      require(hasRole(OWNER_ROLE, _msgSender()) || hasRole(LENDER_ROLE, _msgSender()) || hasRole(DELEGATE_ROLE, _msgSender()) || hasRole(BORROWER_ROLE, _msgSender()), \"Caller must have a role to access function call\");\n      _;\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IBorrowerLogic.sol": {
      "content": "pragma solidity ^0.8.4;\n\ninterface IBorrowerLogic {\n/** @notice function call used for creating loan agreements\n        @param Rate interest rate involved in the loanAgreement\n        @param LoanAmount amount issued in the loan\n        @param LoanDuration duration of the created loan*/\n    function createLoanAgreement(uint256 LoanAmount, uint256 LoanDuration, uint256 Rate) external returns (uint256);\n\n    /** @notice function used to execute an existing loan agreement\n        @param loanNumber the loan number for the loan to be executed */\n    function executeLoanAgreement(uint256 loanNumber) external payable returns (bool);\n    \n    /** @notice function call for the Ottley wallet to verify the loan agreement\n        @param loanNumber the loan number that the verification is for\n        @dev ideally we will be able to remove this function and have this verification performed through ethereum signing*/\n    function delegateVerify(uint256 loanNumber) external returns (bool);\n\n    /**@notice function call to check if a loan is overdue\n    @param loanNumber the loan number that is checked if past maturity*/\n    function checkOverdue(uint256 loanNumber) external view returns (bool);\n    \n    /**@notice function call to automatically route incoming funds\n        @param loanNumber the loanNumber that the funds are being routed for\n        @param loanAmount the final amount of the loan equal to the loanBase + interest\n        @param loanBase the initial base amount of the loan */\n    function routeFunds(uint256 loanNumber, uint256 loanAmount, uint256 loanBase) external returns (bool);\n\n    /**@notice function to repay a loan */\n    function repayLoan(uint256 loanNumber) external payable returns (bool);  \n\n    /** @notice function call to check for all overdue loans any overdue loans*/\n    function checkAll() external view returns (uint256[] memory);\n\n    /** @notice function call used to 'deprecate' a loan - called when a loan has been fully repaid\n        @param loanNumber the loanNumber for the loan to be deprecated */\n    function deprecateLoan(uint256 loanNumber) external returns (uint256);\n}"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Vesting.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n//relevant includes IVesting.sol etc...\nimport './interfaces/IVesting.sol';\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\ncontract Vesting is  Ownable, IVesting {\n    \n    struct Schedule {\n        uint256 totalAmount;\n        uint256 claimedAmount;\n        uint256 startTime;\n        uint256 cliffTime;\n        uint256 endTime;\n        bool isFixed;\n        bool cliffClaimed;\n    }\n\n    mapping(address => mapping(uint => Schedule)) public schedules;\n    mapping(address => uint) public numberOfSchedules;\n\n    uint256 valueLocked;\n    IERC20 private DAOToken;\n\n    event Claim(uint amount, address claimer);\n\n    constructor(address _token) public {\n        DAOToken = IERC20(_token);\n    }\n\n    function setVestingSchedule(\n        address account,\n        uint256 amount,\n        bool isFixed,\n        uint256 cliffWeeks,\n        uint256 vestingWeeks\n    ) public override onlyOwner {\n        require(\n            (DAOToken.balanceOf(address(this)) - valueLocked) >= amount, \n            \"Vesting: not enough tokens in contract\");\n        require(vestingWeeks >= cliffWeeks, \"Vesting: Cannot withdraw before cliff period\");\n\n        uint256 currentNumSchedules = numberOfSchedules[account];\n        schedules[account][currentNumSchedules] = Schedule(\n            amount,\n            0,\n            block.timestamp,\n            block.timestamp + (cliffWeeks * 1 weeks),\n            block.timestamp + (vestingWeeks * 1 weeks),\n            isFixed,\n            false\n        );\n\n        numberOfSchedules[account] = currentNumSchedules + 1;\n        valueLocked = valueLocked + amount;\n\n    }\n\n\n    function claim(uint256 scheduleNumber) public override {\n        Schedule storage schedule = schedules[msg.sender][scheduleNumber];\n        require(\n            schedule.cliffTime <= block.timestamp,\n            \"Vesting: cliffTime not reached\" \n        );\n\n        require(schedule.totalAmount > 0, \"Vesting: No claimable tokens\");\n\n        uint amount = calcDistribution(schedule.totalAmount, block.timestamp, schedule.startTime, schedule.endTime);\n        \n        amount = amount > schedule.totalAmount ? schedule.totalAmount : amount;\n        uint amountToTransfer = amount - schedule.claimedAmount;\n        schedule.claimedAmount = amount;\n        DAOToken.transfer(msg.sender, amountToTransfer);\n        emit Claim(amount, msg.sender);\n    }\n\n    function cancelVesting(address account, uint256 scheduled) public override onlyOwner {\n        Schedule storage schedule = schedules[account][scheduled];\n        require(schedule.claimedAmount < schedule.totalAmount, \"Vesting: Tokens fully claimed\");\n        require(!schedule.isFixed, \"Vesting: Account is fixed\");\n\n        uint256 outstandingAmount = schedule.totalAmount - schedule.claimedAmount;\n\n        schedule.totalAmount = 0;\n        valueLocked = valueLocked - outstandingAmount;\n    }\n    \n    function getVesting(address account, uint scheduleId) public override view returns (uint256, uint256) {\n        Schedule memory schedule = schedules[account][scheduleId];        \n        return (schedule.totalAmount, schedule.claimedAmount);\n    }\n\n\n    function calcDistribution(uint amount, uint currentTime, uint startTime, uint endTime)\n        public\n        override\n        pure\n        returns(uint256) {\n            return amount * ((currentTime - startTime) / (endTime - startTime));\n        }\n\n        function withdraw (uint amount) public override onlyOwner {\n            require(\n                DAOToken.balanceOf(address(this)) - valueLocked >= amount,\n                \"Withdraw: not enough tokens left\"\n                \n            );\n\n            DAOToken.transfer(owner(), amount);\n        }\n}\n"
    },
    "contracts/interfaces/IVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IVesting {\n    /**\n     * @notice Sets up a vesting schedule for a set user\n     * @dev adds a new Schedule to the schedules mapping\n     * @param account the account that a vesting schedule is being set up for. Will be able to claim tokens after\n     *                the cliff period.\n     * @param amount the amount of tokens being vested for the user.\n     * @param isFixed a flag for if the vesting schedule is fixed or not. Fixed vesting schedules can't be cancelled.\n     */\n    function setVestingSchedule(\n        address account,\n        uint256 amount,\n        bool isFixed,\n        uint256 cliffWeeks,\n        uint256 vestingWeeks\n    ) external;\n\n    /**\n     * @notice allows users to claim vested tokens if the cliff time has passed\n     */\n    function claim(uint256 proposalId) external;\n\n    /**\n     * @notice Allows a vesting schedule to be cancelled.\n     * @dev Any outstanding tokens are returned to the system.\n     * @param account the account of the user whos vesting schedule is being cancelled.\n     */\n    function cancelVesting(address account, uint256 proposalId) external;\n\n    /**\n     * @notice returns the total amount and total claimed amount of a users vesting schedule.\n     * @param account the user to retrieve the vesting schedule for.\n     */\n    function getVesting(address account, uint256 proposalId)\n        external\n        view\n        returns (uint256, uint256);\n\n    /**\n     * @notice calculates the amount of tokens to distribute to an account at any instance in time, based off some\n     *         total claimable amount.\n     * @param amount the total outstanding amount to be claimed for this vesting schedule\n     * @param currentTime the current timestamp\n     * @param startTime the timestamp this vesting schedule started\n     * @param endTime the timestamp this vesting schedule ends\n     */\n    function calcDistribution(\n        uint256 amount,\n        uint256 currentTime,\n        uint256 startTime,\n        uint256 endTime\n    ) external pure returns (uint256);\n\n    /**\n    * @notice Withdraws TCR tokens from the contract.\n    * @dev blocks withdrawing locked tokens.\n    */\n    function withdraw(uint amount) external;\n}  \n"
    },
    "contracts/DAOToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n//import openzeppelin ERC20, Ownable etc...\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/*\n *  IMPORT USER AGREEMENT HERE\n */\n\ncontract DAOToken is ERC20, Ownable {\n    constructor(uint256 initSupply, address initOwner) public ERC20(\"tDAO\", \"TestDAO\") {\n        _mint(initOwner, initSupply);\n    }\n\n    function mint(address to, uint amount) public onlyOwner {\n        _mint(to, amount);\n    } \n}\n"
    },
    "contracts/OraclePrice.sol": {
      "content": "pragma solidity ^0.8.4;\n\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//Intermediate contract for obtaining index prices, can be used in future to get custom\n//prices\n\n\n//Can use a price converter function to derive different price denominations - eg use eth/usd and aud/usd to get eth/aud \ncontract OraclePrice {\n    mapping(string => address) public priceOracles;\n    AggregatorV3Interface internal priceFeed;\n\n    constructor () {\n        priceOracles[\"USDC/ETH\"] = 0xdCA36F27cbC4E38aE16C4E9f99D39b42337F6dcf;\n        priceOracles[\"DAI/USD\"] = 0x2bA49Aaa16E6afD2a993473cfB70Fa8559B523cF;\n        priceFeed = AggregatorV3Interface(priceOracles[\"USDC/ETH\"]);\n\n    }\n    \n    function getPrice(string memory pair) public view returns (int) {\n        (,int price,,,) = priceFeed.latestRoundData();\n        return price;\n    }\n\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}