{
  "language": "Solidity",
  "sources": {
    "contracts/OraclePrice.sol": {
      "content": "pragma solidity ^0.8.4;\n\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//Intermediate contract for obtaining index prices, can be used in future to get custom\n//prices\n\n\n//Can use a price converter function to derive different price denominations - eg use eth/usd and aud/usd to get eth/aud\ncontract OraclePrice {\n    mapping(string => address) public priceOracles;\n    AggregatorV3Interface internal priceFeed;\n\n    constructor () {\n        priceOracles[\"USDC/ETH\"] = 0xdCA36F27cbC4E38aE16C4E9f99D39b42337F6dcf;\n        priceOracles[\"DAI/USD\"] = 0x2bA49Aaa16E6afD2a993473cfB70Fa8559B523cF;\n        priceFeed = AggregatorV3Interface(priceOracles[\"USDC/ETH\"]);\n\n    }\n\n    function addOracle(string memory pair, address a) public {\n      priceOracles[pair] = a;\n    }\n\n    function setOracle(string memory pair) public {\n      priceFeed = AggregatorV3Interface(priceOracles[pair]);\n    }\n\n\n    function getPrice() public view returns (int) {\n        (,int price,,,) = priceFeed.latestRoundData();\n        return price;\n    }\n\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}