{
  "address": "0xD82E296Eb2b96DDdc25b2Ebd989B685FFDe60D77",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pair",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "addOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "priceOracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pair",
          "type": "string"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x57f01bb1eb5a94646e8cf5b6dbaa3276768b3cf64552031d4cc78120d6e30db7",
  "receipt": {
    "to": null,
    "from": "0x2E3A993adb538370b8020c47b61A33DbE6e3ef4c",
    "contractAddress": "0xD82E296Eb2b96DDdc25b2Ebd989B685FFDe60D77",
    "transactionIndex": 1,
    "gasUsed": "522874",
    "logsBloom": "0x
    "blockHash": "0x29717d8de014319fd046b037ce5e9037aead8a43f4da61027f3641500baebe8c",
    "transactionHash": "0x57f01bb1eb5a94646e8cf5b6dbaa3276768b3cf64552031d4cc78120d6e30db7",
    "logs": [],
    "blockNumber": 10245432,
    "cumulativeGasUsed": "1601656",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "adb029bb0399955ddf203cf8744207c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pair\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"priceOracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pair\",\"type\":\"string\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OraclePrice.sol\":\"OraclePrice\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/OraclePrice.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//Intermediate contract for obtaining index prices, can be used in future to get custom\\n//prices\\n\\n\\n//Can use a price converter function to derive different price denominations - eg use eth/usd and aud/usd to get eth/aud\\ncontract OraclePrice {\\n    mapping(string => address) public priceOracles;\\n    AggregatorV3Interface internal priceFeed;\\n\\n    constructor () {\\n        priceOracles[\\\"USDC/ETH\\\"] = 0xdCA36F27cbC4E38aE16C4E9f99D39b42337F6dcf;\\n        priceOracles[\\\"DAI/USD\\\"] = 0x2bA49Aaa16E6afD2a993473cfB70Fa8559B523cF;\\n        priceFeed = AggregatorV3Interface(priceOracles[\\\"USDC/ETH\\\"]);\\n\\n    }\\n\\n    function addOracle(string memory pair, address a) public {\\n      priceOracles[pair] = a;\\n    }\\n\\n    function setOracle(string memory pair) public {\\n      priceFeed = AggregatorV3Interface(priceOracles[pair]);\\n    }\\n\\n\\n    function getPrice() public view returns (int) {\\n        (,int price,,,) = priceFeed.latestRoundData();\\n        return price;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf1757ddd2d22b7773450c5af3d65c2e550c6aec72e07ef162655c9369304af13\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5073dca36f27cbc4e38ae16c4e9f99d39b42337f6dcf6000604051610034906101b7565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550732ba49aaa16e6afd2a993473cfb70fa8559b523cf60006040516100a3906101cc565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006040516100fd906101b7565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061023e565b600061017e6008836101e1565b9150610189826101ec565b600882019050919050565b60006101a16007836101e1565b91506101ac82610215565b600782019050919050565b60006101c282610171565b9150819050919050565b60006101d782610194565b9150819050919050565b600081905092915050565b7f555344432f455448000000000000000000000000000000000000000000000000600082015250565b7f4441492f55534400000000000000000000000000000000000000000000000000600082015250565b6107248061024d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635900c74d1461005157806398d5fdca1461006d578063aad6601f1461008b578063e40b1a39146100bb575b600080fd5b61006b600480360381019061006691906103b0565b6100d7565b005b610075610138565b60405161008291906104fc565b60405180910390f35b6100a560048036038101906100a0919061036f565b6101e8565b6040516100b291906104e1565b60405180910390f35b6100d560048036038101906100d0919061036f565b610231565b005b806000836040516100e891906104ca565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156101a357600080fd5b505afa1580156101b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101db9190610404565b5050509150508091505090565b6000818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008160405161024191906104ca565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006102c66102c18461053c565b610517565b9050828152602081018484840111156102de57600080fd5b6102e98482856105df565b509392505050565b60008135905061030081610692565b92915050565b600081519050610315816106a9565b92915050565b600082601f83011261032c57600080fd5b813561033c8482602086016102b3565b91505092915050565b600081519050610354816106c0565b92915050565b600081519050610369816106d7565b92915050565b60006020828403121561038157600080fd5b600082013567ffffffffffffffff81111561039b57600080fd5b6103a78482850161031b565b91505092915050565b600080604083850312156103c357600080fd5b600083013567ffffffffffffffff8111156103dd57600080fd5b6103e98582860161031b565b92505060206103fa858286016102f1565b9150509250929050565b600080600080600060a0868803121561041c57600080fd5b600061042a8882890161035a565b955050602061043b88828901610306565b945050604061044c88828901610345565b935050606061045d88828901610345565b925050608061046e8882890161035a565b9150509295509295909350565b61048481610583565b82525050565b61049381610595565b82525050565b60006104a48261056d565b6104ae8185610578565b93506104be8185602086016105ee565b80840191505092915050565b60006104d68284610499565b915081905092915050565b60006020820190506104f6600083018461047b565b92915050565b6000602082019050610511600083018461048a565b92915050565b6000610521610532565b905061052d8282610621565b919050565b6000604051905090565b600067ffffffffffffffff82111561055757610556610652565b5b61056082610681565b9050602081019050919050565b600081519050919050565b600081905092915050565b600061058e8261059f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561060c5780820151818401526020810190506105f1565b8381111561061b576000848401525b50505050565b61062a82610681565b810181811067ffffffffffffffff8211171561064957610648610652565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61069b81610583565b81146106a657600080fd5b50565b6106b281610595565b81146106bd57600080fd5b50565b6106c9816105bf565b81146106d457600080fd5b50565b6106e0816105c9565b81146106eb57600080fd5b5056fea2646970667358221220afaf0acc145749fb365d2830cd0785e88b68ca3cc9c819a55a0d7c36cd6e111c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80635900c74d1461005157806398d5fdca1461006d578063aad6601f1461008b578063e40b1a39146100bb575b600080fd5b61006b600480360381019061006691906103b0565b6100d7565b005b610075610138565b60405161008291906104fc565b60405180910390f35b6100a560048036038101906100a0919061036f565b6101e8565b6040516100b291906104e1565b60405180910390f35b6100d560048036038101906100d0919061036f565b610231565b005b806000836040516100e891906104ca565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156101a357600080fd5b505afa1580156101b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101db9190610404565b5050509150508091505090565b6000818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008160405161024191906104ca565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006102c66102c18461053c565b610517565b9050828152602081018484840111156102de57600080fd5b6102e98482856105df565b509392505050565b60008135905061030081610692565b92915050565b600081519050610315816106a9565b92915050565b600082601f83011261032c57600080fd5b813561033c8482602086016102b3565b91505092915050565b600081519050610354816106c0565b92915050565b600081519050610369816106d7565b92915050565b60006020828403121561038157600080fd5b600082013567ffffffffffffffff81111561039b57600080fd5b6103a78482850161031b565b91505092915050565b600080604083850312156103c357600080fd5b600083013567ffffffffffffffff8111156103dd57600080fd5b6103e98582860161031b565b92505060206103fa858286016102f1565b9150509250929050565b600080600080600060a0868803121561041c57600080fd5b600061042a8882890161035a565b955050602061043b88828901610306565b945050604061044c88828901610345565b935050606061045d88828901610345565b925050608061046e8882890161035a565b9150509295509295909350565b61048481610583565b82525050565b61049381610595565b82525050565b60006104a48261056d565b6104ae8185610578565b93506104be8185602086016105ee565b80840191505092915050565b60006104d68284610499565b915081905092915050565b60006020820190506104f6600083018461047b565b92915050565b6000602082019050610511600083018461048a565b92915050565b6000610521610532565b905061052d8282610621565b919050565b6000604051905090565b600067ffffffffffffffff82111561055757610556610652565b5b61056082610681565b9050602081019050919050565b600081519050919050565b600081905092915050565b600061058e8261059f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561060c5780820151818401526020810190506105f1565b8381111561061b576000848401525b50505050565b61062a82610681565b810181811067ffffffffffffffff8211171561064957610648610652565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61069b81610583565b81146106a657600080fd5b50565b6106b281610595565b81146106bd57600080fd5b50565b6106c9816105bf565b81146106d457600080fd5b50565b6106e0816105c9565b81146106eb57600080fd5b5056fea2646970667358221220afaf0acc145749fb365d2830cd0785e88b68ca3cc9c819a55a0d7c36cd6e111c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "contracts/OraclePrice.sol:OraclePrice",
        "label": "priceOracles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 55,
        "contract": "contracts/OraclePrice.sol:OraclePrice",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}